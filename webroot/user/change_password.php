<?php

header("Cache-Control: no-store, no-cache, must-revalidate, max-age=0");
header("Cache-Control: post-check=0, pre-check=0", false);
header("Pragma: no-cache");

require_once '../helpers.php';
require_once '../config.php';

$d = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME . ";charset=" . DB_CHARSET;
try {
        if($_SERVER['REQUEST_METHOD'] !== 'POST' || !isset($_POST)) {
                http_response_code(405);
                exit();
        }
        if (empty($_POST)) {
                http_response_code(400);
                exit();
        }

        // Auth Begin
        $jwt = "";
        if (isset($_POST['token']) && !empty($_POST['token'])) {
                if (is_jwt_valid($_POST['token'])) {
                        $jwt = $_POST['token'];
                }
        }
        

        if ($jwt == "") {
                http_response_code(401);
                echo("NO_LOGON");
                exit();
        }
        // Auth OK

        $pdo = new PDO($d, DB_USER, DB_PASSWORD);
        if ($pdo) {
        // CHECK ID
                $userid = getTag($jwt, "sub");

                if (!preg_match("/^[0-9]+$/", $userid)) {
                        http_response_code(400);
                        echo("INVALID_USER");
                        exit();
                }


                // Check if old password is correct

                $stmt = $pdo->prepare("SELECT `password` FROM `" . TABLE_NAME_USERS . "` WHERE `id` = :id");
                $stmt->bindParam(":id", $userid, PDO::PARAM_INT);
                $stmt->execute();
                $oldhash = $stmt->fetch(PDO::FETCH_ASSOC)['password'];

                if (!password_verify($_POST['oldpassword'], $oldhash)) {
                        http_response_code(400);
                        echo("WRONG_PASSWORD");
                        exit();
                }

                // CHECK PASSWORD

                $newpassword = "";
                if (!isset($_POST['password']) || empty($_POST['password']) && !isset($_POST['password2']) || empty($_POST['password2'])) {
                        http_response_code(400);
                        echo("MISSING_PASSWORD");
                        exit();
                }
                
                if (strlen($_POST['password']) > 512) {
                        http_response_code(400);
                        echo("PASSWORD_TOO_LONG");
                        exit();
                }

                // Check if valid password with regex, min 6car, 1num, 1upper, 1lower
                $regex = "/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{6,}$/";
                
                if (!preg_match($regex, $_POST['password'])) {
                        http_response_code(400);
                        echo("PASSWORD_CRITERIA_NOT_MET");
                        exit();
                }
                
                if ($_POST['password'] !== $_POST['password2']) {
                        http_response_code(400);
                        echo("PASSWORDS_DO_NOT_MATCH");
                        exit();
                }

                $newpassword = password_hash($_POST['password'], PASSWORD_DEFAULT);
                
                // POST

                // change password in user
                $sql = "UPDATE " . TABLE_NAME_USERS . " SET password = :password WHERE id = :id";
                $stmt = $pdo->prepare($sql);
                $stmt->bindValue(':password', $newpassword, PDO::PARAM_STR);
                $stmt->bindValue(':id', $userid, PDO::PARAM_INT);
                $stmt->execute();

                if ($stmt->rowCount() == 1) {
                        http_response_code(200);
                        echo("OK");
                        exit();
                } else {
                        http_response_code(500);
                        echo("PASSWORD_CHANGE_FAILED");
                        exit();
                }
                





        }

} catch (PDOException $e) {
        http_response_code(500);
        error($e->getMessage());
        exit();
}



?>