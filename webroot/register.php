<?php 

header("Cache-Control: no-store, no-cache, must-revalidate, max-age=0");
header("Cache-Control: post-check=0, pre-check=0", false);
header("Pragma: no-cache");

require 'config.php';
require 'helpers.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {


    // check if all params are present and not empty
    if (!isset($_POST["uname"]) || empty($_POST["uname"]) || !isset($_POST["name"]) || empty($_POST["name"]) || !isset($_POST["password"]) || empty($_POST["password"]) || !isset($_POST["password2"]) || empty($_POST["password2"])) {
        http_response_code(400);
        echo("MISSING_PARAMS");
        exit();
    }


    // CHECK CRED
    $name = htmlspecialchars($_POST["name"]);
    $uname = htmlspecialchars($_POST["uname"]);
    $password = htmlspecialchars($_POST["password"]);
    $password2 = htmlspecialchars($_POST["password2"]);

    $nameregex = "/^[a-zA-ZåäöÅÄÖ\- ]+$/";
    $unameregex = "/^[a-zA-ZåäöÅÄÖ\-]+$/";
    
    if (!preg_match($nameregex, $name)) {
        http_response_code(400);
        echo($name);
        exit();
    }

    if (!preg_match($unameregex, $uname)) {
        http_response_code(400);
        echo("INVALID_UNAME");
        exit();
    }

    $passregex = "/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{6,}$/";
                
    if (!preg_match($passregex, $_POST['password']) || !preg_match($passregex, $_POST['password2'])) {
            http_response_code(400);
            echo("PASSWORD_CRITERIA_NOT_MET");
            exit();
    }

    if ($_POST['password'] !== $_POST['password2']) {
            http_response_code(400);
            echo("PASSWORDS_DO_NOT_MATCH");
            exit();
    }

    if (strlen($name) > 32 || strlen($uname) > 32) {
            http_response_code(400);
            echo("NAME_TOO_LONG");
            exit();
    }
    
    $conn = "mysql:host=". DB_HOST . ";dbname=". DB_NAME .";charset=" . DB_CHARSET;
    
    $pdo = new PDO($conn, DB_USER, DB_PASSWORD);
    
    $userstmt = $pdo->prepare("SELECT * FROM `" . TABLE_NAME_USERS . "` WHERE `username` = :username");
    $stmt = $pdo->prepare("INSERT INTO `" . TABLE_NAME_USERS . "` (`name`, `username`, `password`) VALUES (:name, :username, :password)");
    
    $userstmt->bindParam(":username", $uname, PDO::PARAM_STR);
    $userstmt->execute();
    if ($userstmt->rowCount() == 0) {
        $userstmt->fetchAll(PDO::FETCH_ASSOC);
        $userstmt->closeCursor();
        
        // hash passowrd
        $hash = password_hash($password, PASSWORD_DEFAULT);

        $stmt->bindParam(":name", $name, PDO::PARAM_STR);
        $stmt->bindParam(":username", $uname, PDO::PARAM_STR);
        $stmt->bindParam(":password", $hash, PDO::PARAM_STR);
        $stmt->execute();

        $userstmt->bindParam(":username", $uname, PDO::PARAM_STR);
        $userstmt->execute();
        $user = $userstmt->fetch(PDO::FETCH_ASSOC);

        $headers = ['alg'=>'HS256','typ'=>'JWT'];
        
        $iat = date_timestamp_get(date_create());
        
        $exptime = date_create();
        $exptime->modify('+1 months');
        $exp = date_timestamp_get($exptime);
        
        //build the payload
        $payload = ['sub'=>$user['id'],'iat'=>$iat,'exp'=>$exp,'name'=>$user['username']];
        
        $jwt = generate_jwt($headers, $payload);
        
        http_response_code(302);
        echo(HOST . "redirect.php?token=" .$jwt);
        // SUCCESS
        exit();

        
    }

    echo("USER_ALREADY_EXISTS");
    exit();    
}
?>
<!DOCTYPE HTML>
<html>
    <head>
	    <script src="register.js?version=<?=CACHE?>"></script>
        <link rel="stylesheet" href="css/style.css?version=<?=CACHE?>">
        <title>REGISTER USER</title>
    </head>
    <body>
        <div class="wrapper">
            <a class="logo" href="/">TWOTTER</a>
            <h2 class="login">REGISTER USER</h2>
            <p class="login" id="alert">&nbsp;</p>
            <form>
                <input class="input"size="50" type="text" placeholder="Name" id="name" name="name" required>
                <br>
                <input class="input"size="50" type="text" placeholder="Username" id="uname" name="uname" required>
                <br>
                <input class="input" size="50" type="password" pattern="(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{6,}" id="password" name="password" placeholder="New password (6char, 1num, 1upper, 1lower)" required>
                <br>
                <input class="input"size="50" type="password" pattern="(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{6,}" id="password2" name="password2" placeholder="Repeat new password" required>
                <br>
                <br>
				<a class="button" href="#" onclick="registerbutton('<?=HOST?>')">REGISTER USER</a>
            </form>
            <br>
        </div>
    </body>
</html>